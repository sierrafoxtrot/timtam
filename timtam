#!/usr/bin/env python
# timtam - framebuffer slide show
# Copyright (C) 2015 Scott Finneran
#
# Windsock is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Windsock is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Windsock.  If not, see <http://www.gnu.org/licenses/>.

import ConfigParser
import glob
import os
import pygame
import random
import sys
import time

class fb :
    screen = None
    size   = None

    def __init__(self):
        "Ininitializes a new pygame screen using the framebuffer"
        # Based on "Python GUI in Linux frame buffer"
        # http://www.karoltomala.com/blog/?p=679
        disp_no = os.getenv("DISPLAY")
        if disp_no:
            print "I'm running under X display = {0}".format(disp_no)

        # Check which frame buffer drivers are available
        # Start with fbcon since directfb hangs with composite output
        drivers = ['fbcon', 'directfb', 'svgalib']
        found = False
        for driver in drivers:
            # Make sure that SDL_VIDEODRIVER is set
            if not os.getenv('SDL_VIDEODRIVER'):
                os.putenv('SDL_VIDEODRIVER', driver)
            try:
                pygame.display.init()
                pygame.mouse.set_visible(False) # hide the pointer
            except pygame.error:
                print 'Driver: {0} failed.'.format(driver)
                continue
            found = True
            break

        if not found:
            raise Exception('No suitable video driver found!')

        self.size = (pygame.display.Info().current_w, pygame.display.Info().current_h)
        print "Framebuffer size: %d x %d" % (self.size[0], self.size[1])
        self.screen = pygame.display.set_mode(self.size, pygame.FULLSCREEN)
        # Clear the screen to start
        self.screen.fill((0, 0, 0))
        # Initialise font support
        pygame.font.init()
        # Render the screen
        pygame.display.update()

    def display(self, image):
        image.scale(self.size[0], self.size[1])

        # Get updated image dimensions
        (iw, ih) = image.get_size()

        display_size = (pygame.display.Info().current_w, pygame.display.Info().current_h)
        xp = (display_size[0] - iw) / 2  # find location to center image on screen
        yp = (display_size[1] - ih) / 2

        # Blank the screen in case the image doesn't fill it all
        self.screen.fill([0, 0, 0])
        self.screen.blit(image.handle,(xp,yp))
        pygame.display.update()

    def message(self, msg):
        # Get a refernce to the system font, size 30
        font = pygame.font.Font(None, 30)
        # Render some white text (pyScope 0.1) onto text_surface
        text_surface = font.render(msg, True, (255, 255, 255))  # White text
        # Blit the text at 10, 0
        self.screen.blit(text_surface, (10, 0))
        # Update the display
        pygame.display.update()

    def __del__(self):
        "Destructor to make sure pygame shuts down, etc."

    def test(self):
        # Fill the screen with red (255, 0, 0)
        red = (255, 0, 0)
        self.screen.fill(red)
        # Update the display
        pygame.display.update()

class image :
    handle = None
    img_height = None
    img_width = None
    isValid = False

    def __init__(self, filename):
        try:
            self.handle = pygame.image.load(filename).convert()
            self.img_height = self.handle.get_height()
            self.img_width  = self.handle.get_width()
            self.isValid = True
        except:
            print "Failed to load image: {0}".format(filename)

    def get_size(self):
        return (self.img_width, self.img_height)

    def scale(self, screen_width, screen_height):
        # If the image isn't already the same size as the screen, it needs to be scaled
        if ((self.img_height != screen_height) or (self.img_width != screen_width)):
            # Determine what the height will be if we expand the image to fill the whole width
            scaled_height = int((float(screen_width) / self.img_width) * self.img_height)
            # If the scaled image is going to be taller than the screen, then limit
            # the maximum height and scale the width instead
            if (scaled_height > screen_height):
                scaled_height = screen_height
                scaled_width = int((float(screen_height) / self.img_height) * self.img_width)
            else:
                scaled_width = screen_width

            img_bitsize = self.handle.get_bitsize()

            # transform.smoothscale() can only be used for 24-bit and 32-bit images. If this is
            # not a 24-bit or 32-bit image, use transform.scale() instead which will be ugly but
            # at least will work
            if (img_bitsize == 24 or img_bitsize == 32):
                self.handle = pygame.transform.smoothscale(self.handle, (scaled_width, scaled_height))
            else:
                self.handle = pygame.transform.scale(self.handle, (scaled_width, scaled_height))

#            print "Scaled: bits: {0} sh: {1} sw: {2}  ih: {3}  iw: {4}  oh: {5}  ow: {6}".\
#                format(img_bitsize, screen_height, screen_width, scaled_height, scaled_width, self.img_height, self.img_width)

            self.img_height = scaled_height
            self.img_width = scaled_width

def check_for_abort():
    events = pygame.event.get()
    for event in events:
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_q:
                print "Exiting"
                sys.exit()


# ...and so it begins

# a screen to display things on
framebuffer = fb()
# handy config reader object
config = ConfigParser.ConfigParser()
# the types of files we are interested in
filetypes = ['*.PNG', '*.png', '*.JPG', '*.jpg', '*.JPEG', '*.jpeg']

while True:
    # Read the config (yes again, it may have changed)
    config.read("./config.ini")
    print "Config available: {0}".format(config.sections())

    try:
        delay = int(config.get("Common", "delay"))
    except:
        delay = 5 # Default
    print "Delay for this run: %d seconds" % delay

    try:
        image_directory = str(config.get("Common", "image_directory"))
    except:
        image_directory = os.getcwd()
    print "Image location: %s" % image_directory

    try:
        sorting = config.getboolean("Common", "sort")
    except:
        sorting = False
    print "Sorting file list: %s" % sorting

    files_grabbed = []
    for files in filetypes:
        files_grabbed.extend(glob.glob(os.path.join(image_directory, files)))

    if sorting:
        files_grabbed.sort(key=lambda x: x.lower()) # Sort ignoring case
    print "Images to show: %s\n" % format(files_grabbed)

    if not files_grabbed:
        framebuffer.message("No Images to show.")
        check_for_abort()
        time.sleep(delay)
    else:
        for f in files_grabbed:
            check_for_abort()
            i = image(f)
            if i.isValid:
                framebuffer.display(i)
            time.sleep(delay)
